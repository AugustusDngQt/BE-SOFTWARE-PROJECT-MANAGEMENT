generator client {
  provider = "prisma-client-js"
  // output   = "../../node_modules/@prisma/postgres/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String     @id @unique @default(uuid()) @db.Uuid
  email               String     @unique
  name                String
  address             String
  phoneNumber         String     @unique
  password            String
  verifiedToken       String?
  forgotPasswordToken String?
  refreshToken        String?
  status              String
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  deletedAt           DateTime?
  createdBy           Json?
  updatedBy           Json?
  deletedBy           Json?
  isDeleted           Boolean    @default(false)
  Comments            Comments[]
  Members             Members[]
  Sprints             Sprints[]
}

model Projects {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   Json?
  updatedBy   Json?
  deletedBy   Json?
  isDeleted   Boolean   @default(false)
  Issues      Issues[]
  Members     Members[]
  Sprints     Sprints[]
}

model Issues {
  id             String     @id @unique @default(uuid()) @db.Uuid
  name           String
  key            String     @unique
  type           String
  status         String
  priority       String
  sprintPosition Int?
  boardPosition  Int?
  reporterId     String?    @db.Uuid
  assigneeId     String?    @db.Uuid
  issueParrentId String?
  sprintId       String?    @db.Uuid
  projectId      String?    @db.Uuid
  note           String?
  description    String?
  timeRemaining  Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  createdBy      Json?
  updatedBy      Json?
  deletedBy      Json?
  isDeleted      Boolean    @default(false)
  Comments       Comments[]
  Project        Projects?  @relation(fields: [projectId], references: [id])
  Sprint         Sprints?   @relation(fields: [sprintId], references: [id])
}

model Sprints {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  description String?
  startDate   DateTime  @default(now())
  endDate     DateTime
  status      String
  projectId   String    @db.Uuid
  assigneeId  String?   @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   Json?
  updatedBy   Json?
  deletedBy   Json?
  isDeleted   Boolean   @default(false)
  issues      Issues[]
  Assignee    Users?    @relation(fields: [assigneeId], references: [id])
  project     Projects  @relation(fields: [projectId], references: [id])
}

model Members {
  id        String    @id @unique @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  projectId String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
  createdBy Json?
  updatedBy Json?
  deletedBy Json?
  project   Projects  @relation(fields: [projectId], references: [id])
  user      Users     @relation(fields: [userId], references: [id])
}

model Roles {
  id              String            @id @unique @default(uuid()) @db.Uuid
  name            String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  createdBy       Json?
  updatedBy       Json?
  deletedBy       Json?
  isDeleted       Boolean           @default(false)
  RolePermissions RolePermissions[]
}

model Permissions {
  id              String            @id @unique @default(uuid()) @db.Uuid
  name            String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  createdBy       Json?
  updatedBy       Json?
  deletedBy       Json?
  isDeleted       Boolean           @default(false)
  RolePermissions RolePermissions[]
}

model RolePermissions {
  id           String      @id @unique @default(uuid()) @db.Uuid
  roleId       String      @db.Uuid
  permissionId String      @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  createdBy    Json?
  updatedBy    Json?
  deletedBy    Json?
  isDeleted    Boolean     @default(false)
  permission   Permissions @relation(fields: [permissionId], references: [id])
  role         Roles       @relation(fields: [roleId], references: [id])
}

model Comments {
  id        String    @id @unique @default(uuid()) @db.Uuid
  content   String
  issueId   String    @db.Uuid
  userId    String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
  createdBy Json?
  updatedBy Json?
  deletedBy Json?
  issue     Issues    @relation(fields: [issueId], references: [id])
  User      Users     @relation(fields: [userId], references: [id])
}
