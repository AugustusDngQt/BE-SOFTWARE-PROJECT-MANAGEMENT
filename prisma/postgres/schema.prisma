generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/postgres/client"
}

generator client_default {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       String  @id @unique @default(uuid()) @db.Uuid
  name     String
  email    String
  password String
  avatar   String?
}

model Projects {
  id              String    @id @unique @default(uuid()) @db.Uuid
  key             String    @unique
  name            String    @unique
  defaultAssignee String?
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  members         Members[]
}

model Issues {
  id             String     @id @unique @default(uuid()) @db.Uuid
  key            String     @unique
  name           String
  description    String?    @db.Text()
  status         String     @default("TODO")
  type           String     @default("TASK")
  sprintPosition Float
  boardPosition  Float      @default(-1)
  reporterId     String     @default("1")
  assigneeId     String?
  parentId       String?
  sprintId       String?    @db.Uuid
  isDeleted      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  sprintColor    String?
  creatorId      String
  comments       Comments[]
  Sprint         Sprints?   @relation(fields: [sprintId], references: [id])
}

model Sprints {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  description String?   @db.Text()
  duration    String?
  startDate   DateTime?
  endDate     DateTime?
  creatorId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
  status      String    @default("PENDING")
  issues      Issues[]
}

model Members {
  id        String   @id @unique @default(uuid()) @db.Uuid
  projectId String   @db.Uuid
  project   Projects @relation(fields: [projectId], references: [id])
}

// model Roles {
//   id            String    @id @unique @default(uuid()) @db.Uuid
//   name          String
//   description   String?
//   isActive      Boolean   @default(true)
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   deletedAt     DateTime?
//   createdBy     Json?
//   updatedBy     Json?
//   deletedBy     Json?
//   isDeleted     Boolean   @default(false)
//   Members       Members[]
//   permissionIds String[]
// }

// model Permissions {
//   id          String    @id @unique @default(uuid()) @db.Uuid
//   name        String
//   path        String
//   module      String // EPermissionModules
//   method      String // EPermissionMethods
//   description String?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   deletedAt   DateTime?
//   createdBy   Json?
//   updatedBy   Json?
//   deletedBy   Json?
//   isDeleted   Boolean   @default(false)
// }

model Comments {
  id        String    @id @unique @default(uuid()) @db.Uuid
  content   String    @db.Text()
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isEdited  Boolean   @default(false)
  issueId   String    @db.Uuid
  logId     String?
  Issue     Issues?   @relation(fields: [issueId], references: [id])
}
